/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.api.model.Termin;
import com.example.demo.api.model.TerminRequest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Auto-generated stub by org.openapitools:openapi-generator-maven-plugin:5.1.0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-01T18:01:02.009225+02:00[Europe/Berlin]")
@Validated
@Api(value = "werkstatt", description = "the werkstatt API")
public interface WerkstattApi {

    default WerkstattApiDelegate getDelegate() {
        return new WerkstattApiDelegate() {};
    }

    /**
     * GET /werkstatt/{werkstattId}/termin/{terminId} : Termin abrufen
     *
     * @param werkstattId Die Kennung der Werkstatt (required)
     * @param terminId Die Id des Termines (required)
     * @return Success (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Termin abrufen", nickname = "getTermin", notes = "", response = Termin.class, tags={ "termine", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Termin.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @GetMapping(
        value = "/werkstatt/{werkstattId}/termin/{terminId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Termin> getTermin(@ApiParam(value = "Die Kennung der Werkstatt",required=true) @PathVariable("werkstattId") String werkstattId,@ApiParam(value = "Die Id des Termines",required=true) @PathVariable("terminId") String terminId) {
        return getDelegate().getTermin(werkstattId, terminId);
    }


    /**
     * GET /werkstatt/{werkstattId}/termine : Eine Liste aller Termine mit der Werkstatt
     *
     * @param werkstattId Die Kennung der Werkstatt (required)
     * @param von Nur Termine nach diesem Datum (optional)
     * @param bis Nur Termine vor diesem Datum (optional)
     * @param leistungsId Nur Termine dieser Leistung (optional)
     * @return Eine Terminliste (status code 200)
     */
    @ApiOperation(value = "Eine Liste aller Termine mit der Werkstatt", nickname = "getTermine", notes = "", response = Termin.class, responseContainer = "List", tags={ "termine", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Eine Terminliste", response = Termin.class, responseContainer = "List") })
    @GetMapping(
        value = "/werkstatt/{werkstattId}/termine",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Termin>> getTermine(@ApiParam(value = "Die Kennung der Werkstatt",required=true) @PathVariable("werkstattId") String werkstattId, @ApiParam(value = "Nur Termine nach diesem Datum") @Valid @RequestParam(value = "von", required = false) String von, @ApiParam(value = "Nur Termine vor diesem Datum") @Valid @RequestParam(value = "bis", required = false) String bis, @ApiParam(value = "Nur Termine dieser Leistung") @Valid @RequestParam(value = "leistungsId", required = false) String leistungsId) {
        return getDelegate().getTermine(werkstattId, von, bis, leistungsId);
    }


    /**
     * GET /werkstatt/{werkstattId}/terminvorschlag/ : Terminvorschläge erhalten
     *
     * @param werkstattId Die Kennung der Werkstatt (required)
     * @param leistungsId Terminvorschläge für diese Leistung geben (required)
     * @param von Mögliche Termine nach diesem Datum (optional)
     * @param bis Mögliche Termine vor diesem Datum (optional)
     * @return Eine Liste an möglichen Terminen (status code 200)
     */
    @ApiOperation(value = "Terminvorschläge erhalten", nickname = "getTerminvorschlaege", notes = "", response = Termin.class, responseContainer = "List", tags={ "terminvorschläge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Eine Liste an möglichen Terminen", response = Termin.class, responseContainer = "List") })
    @GetMapping(
        value = "/werkstatt/{werkstattId}/terminvorschlag/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Termin>> getTerminvorschlaege(@ApiParam(value = "Die Kennung der Werkstatt",required=true) @PathVariable("werkstattId") String werkstattId, @NotNull @ApiParam(value = "Terminvorschläge für diese Leistung geben", required = true) @Valid @RequestParam(value = "leistungsId", required = true) String leistungsId, @ApiParam(value = "Mögliche Termine nach diesem Datum") @Valid @RequestParam(value = "von", required = false) String von, @ApiParam(value = "Mögliche Termine vor diesem Datum") @Valid @RequestParam(value = "bis", required = false) String bis) {
        return getDelegate().getTerminvorschlaege(werkstattId, leistungsId, von, bis);
    }


    /**
     * POST /werkstatt/{werkstattId}/termin : Neuen Termin erstellen
     *
     * @param werkstattId Die Kennung der Werkstatt (required)
     * @param termin Der neue Termin (required)
     * @return Success (status code 200)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Neuen Termin erstellen", nickname = "postTermin", notes = "", response = Termin.class, tags={ "termine", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Termin.class),
        @ApiResponse(code = 409, message = "Conflict") })
    @PostMapping(
        value = "/werkstatt/{werkstattId}/termin",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Termin> postTermin(@ApiParam(value = "Die Kennung der Werkstatt",required=true) @PathVariable("werkstattId") String werkstattId,@ApiParam(value = "Der neue Termin" ,required=true )  @Valid @RequestBody TerminRequest termin) {
        return getDelegate().postTermin(werkstattId, termin);
    }

}
